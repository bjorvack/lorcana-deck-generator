"use strict";(self.webpackChunklorcana_deck_generator=self.webpackChunklorcana_deck_generator||[]).push([[792],{555:(e,t,i)=>{const s=/Singer (\d+)/,r=/Resist \+(\d+) \(Damage dealt to this character is reduced by (\d+)\.\)/,n=/Challenger \+(\d+) \(While challenging, this character gets \+(\d) (?:\w+)?(?:{S})?\.\)/,a="crd_be70d689335140bdadcde5f5356e169d";class d{constructor(e){this.id=e.id,this.name=e.name,this.version=e.version||null,this.cost=e.cost||0,this.inkwell=e.inkwell||!1,this.ink=e.ink,this.inks=e.inks||[e.ink],this.keywords=e.keywords||[],this.types=e.type||[],this.classifications=e.classifications||[],this.text=e.text||"",this.image=e.image_uris?.digital?.large||e.image_uris?.digital?.normal||e.image_uris?.digital?.small||"",this.lore=e.lore||0,this.strength=e.strength||0,this.willpower=e.willpower||0,this.requiredKeywords=[],this.requiredClassifications=[],this.requiredTypes=[],this.requiredCardNames=[],this.text=this.text.replace(/{[^}]+}/g,(e=>e.toLowerCase()));let t=this.text.split("\n");this.sanitizedText="";for(let e=0;e<t.length;e++){const i=t[e].split(" ")[0];this.keywords.includes(i)||(this.sanitizedText+=t[e]+"\n")}this.sanitizedText=this.sanitizedText.replace(/\([^)]+\)/g,""),this.sanitizedText=this.sanitizedText.replace(/\(|\)/g,""),this.sanitizedText=this.sanitizedText.trim().toLowerCase(),this.initialize()}initialize(){if(this.hasBodyguard=this.keywords.includes("Bodyguard"),this.hasReckless=this.keywords.includes("Reckless"),this.hasRush=this.keywords.includes("Rush"),this.hasWard=this.keywords.includes("Ward"),this.hasEvasive=this.keywords.includes("Evasive"),this.hasResist=this.keywords.includes("Resist"),this.hasChallenger=this.keywords.includes("Challenger"),this.hasSinger=this.keywords.includes("Singer"),this.hasShift=this.keywords.includes("Shift"),this.hasShift){let e=this.name.split("&").map((e=>e.trim()));this.requiredCardNames.push(...e)}}get title(){return this.name+(this.version?`_${this.version}`:"")}get maxAmount(){return"crd_97f8be5e176144378d58823c6f9c29c7"===this.id?60:4}get singCost(){if(this.hasSinger){const e=this.text.match(s);if(e)return parseInt(e[1])}return this.cost}get resistAmount(){if(this.hasResist){const e=this.text.match(r);if(e)return parseInt(e[1])}return 0}get challengerAmount(){if(this.hasChallenger){const e=this.text.match(n);if(e)return parseInt(e[1])}return 0}deckMeetsRequirements(e){const t=e.filter((e=>e.id!==this.id));return this.deckMeetsRequiredKeywords(t)&&this.deckMeetsRequiredClassifications(t)&&this.deckMeetsRequiredTypes(t)&&this.deckMeetsRequiredCardNames(t)&&this.deckMeetsShiftRequirements(t)}hasRequirementsForDeck(e){const t=[],i=[],s=[],r=[];return e.forEach((e=>{t.push(...e.requiredKeywords),i.push(...e.requiredClassifications),s.push(...e.requiredTypes),r.push(...e.requiredCardNames)})),t.some((e=>this.keywords.includes(e)))||i.some((e=>this.classifications.includes(e)))||s.some((e=>this.types.includes(e)))||r.some((e=>this.name.includes(e)))}deckMeetsRequiredKeywords(e){if(0===this.requiredKeywords.length)return!0;const t=e.map((e=>e.keywords)).flat();return this.requiredKeywords.every((e=>t.includes(e)))}deckMeetsRequiredClassifications(e){if(0===this.requiredClassifications.length)return!0;const t=e.map((e=>e.classifications)).flat();return this.requiredClassifications.some((e=>t.includes(e)))}deckMeetsRequiredTypes(e){if(0===this.requiredTypes.length)return!0;const t=e.map((e=>e.types)).flat();return this.requiredTypes.every((e=>t.includes(e)))}deckMeetsRequiredCardNames(e){if(0===this.requiredCardNames.length)return!0;const t=e.map((e=>e.name));return this.requiredCardNames.some((e=>t.includes(e)))}deckMeetsShiftRequirements(e){if(!this.canShift)return!0;if(e.filter((e=>e.id===a)).length>0)return!0;const t=this.name.split("&").map((e=>e.trim())),i=e.filter((e=>t.includes(e.name)&&e.id!==this.id));let s=!1;return i.forEach((e=>{e.cost<this.cost&&(s=!0)})),s}canShiftFrom(e){if(!this.hasShift)return console.log(`Card ${this.title} can't shift`),!1;if(e.id===a)return!0;const t=this.name.split("&").map((e=>e.trim())),i=e.name.split("&").map((e=>e.trim()));return t.some((e=>i.includes(e)))}}class o{async getCards(){const e=[],t=[0,1,2,3,4,5,6,7,8,9,10].map((e=>this.getCardsByCost(e)));return(await Promise.all(t)).forEach((t=>e.push(...t))),e}async getCardsByCost(e){return fetch(`https://api.lorcast.com/v0/cards/search?q=cost:${e}`).then((e=>e.json())).then((e=>e.results)).then((e=>e.map((e=>new d(e)))))}}class c{calculateWeight(e,t,i,s){let r=1;return r=this.modifyWeightForInkwell(e,r),r=this.modifyWeightForAbility(e,r),r=this.modifyWeightForShiftable(e,r,t),r=this.modifyWeightForShift(e,r,t),r=this.modifyWeightByEffect(e,r),r=this.modifyWeightByKeywords(e,r),r=this.modifyWeightForSinger(e,r,t),r=this.modifyWeightForSong(e,r,t),r=this.modifyWeightByTitlePresence(e,r,t,s),r=this.modifyWeightByRequirements(e,r,t),r=this.modifyWeightByDeckType(e,r,i),r}modifyWeightForInkwell(e,t){return e.inkwell||(t*=.85),t}modifyWeightForAbility(e,t){return void 0!==e.sanitizedText&&""!==e.sanitizedText&&null!==e.sanitizedText&&(t*=1.1),t}modifyWeightForSong(e,t,i){return e.types.includes("Song")?(t*=1.2,e.text.includes("Sing Together")&&(t*=1.05),i.filter((e=>e.types.includes("Character"))).sort(((e,t)=>e.singCost-t.singCost)).forEach((i=>{i.singCost<e.cost&&(t*=.95),i.singCost===e.cost&&(t*=1.2)})),t):t}modifyWeightForSinger(e,t,i){return e.hasSinger?(i.filter((e=>e.types.includes("Song"))).sort(((e,t)=>e.cost-t.cost)).forEach((i=>{i.cost<e.singCost&&(t*=1.1),i.cost===e.singCost&&(t*=1.15),i.text.includes("Sing Together")&&(t*=1.05)})),t):t}modifyWeightForShiftable(e,t,i){if(!e.types.includes("Character"))return t;const s=i.filter((t=>t.hasShift&&t.id!==e.id)),r=[];if(s.forEach((e=>{r.includes(e)||r.push(e)})),0===r.length)return t;for(const i of r)if(i.canShiftFrom(e)){t*=e.cost<i.cost?1.6:.95;break}return t}modifyWeightForShift(e,t,i){if(!e.hasShift)return t;if(0===i.filter((e=>e.hasShift)).length)return 1.5*t;const s=i.filter((e=>e.types.includes("Character")));for(const i of s)if(e.canShiftFrom(i)&&e.id!==i.id){t*=i.cost<e.cost?1.6:.95;break}return t}modifyWeightByTitlePresence(e,t,i,s){return i.filter((t=>t.id===e.id)).length>=e.maxAmount?0:i.filter((t=>t.id===e.id)).length>0?t*(100-s):1===i.filter((t=>t.id===e.id)).length?20*t:t}modifyWeightByRequirements(e,t,i){return e.hasRequirementsForDeck(i)&&(t*=1.8),e.deckMeetsRequirements(i)?t:.05}modifyWeightByEffect(e,t){const i=[{text:"this character can't {e} to sing songs.",modifier:.5},{text:"draw a card",modifier:1.2},{text:"draw 3 cards",modifier:1.1},{text:"draws 7 cards",modifier:1.1},{text:"banish",modifier:1.2},{text:"banish all",modifier:1.1},{text:"return",modifier:1.05},{text:"into your inkwell",modifier:1.1}];for(const s of i)e.sanitizedText.includes(s.text)&&(t*=s.modifier);const s=e.sanitizedText.match(/draws? (\d+) cards/);s&&(t*=1+parseInt(s[1])/10/100);const r=e.sanitizedText.match(/gain (\d+) lore/);return r&&(t*=1+parseInt(r[1])/10/100),t}modifyWeightByKeywords(e,t){const i=[{key:"hasBodyguard",modifier:1.1},{key:"hasEvasive",modifier:1.2},{key:"hasRush",modifier:1.05},{key:"hasWard",modifier:1.05},{key:"hasSinger",modifier:1.3},{key:"hasReckless",modifier:.95},{key:"hasChallenger",modifier:1+e.challengerAmount/10},{key:"hasResist",modifier:1+e.resistAmount/10}];for(const s of i)e[s.key]&&(t*=s.modifier);return t}modifyWeightByDeckType(e,t,i){if("default"===i)return t;if(e.cost<=3){const i=[{text:"banish",modifier:1.4},{text:"banish all",modifier:1.4},{text:"return",modifier:1.7},{text:"into your inkwell",modifier:1.05}];for(const s of i)e.sanitizedText.includes(s.text)&&(t*=s.modifier)}return e.lore>1&&(t*=1+e.lore/10),t}}class h{constructor(e,t){this.weightCalculator=t,this.cards=e,this.currentDistribution=null,this.useDefaultDistribution(),this.initializeCardRequirements()}useAggroDistribution(){this.currentDistribution={1:12,2:20,3:12,4:8,5:8}}useDefaultDistribution(){this.currentDistribution={1:8,2:12,3:20,4:12,5:8}}initializeCardRequirements(){for(const e in this.cards){const t=this.cards[e].sanitizedText;if(null==t||""===t)continue;const i=/gains? \w+(\s\+\d)?/g,s=t.replace(i,"");for(const t of this.keywords)s.includes(t.toLowerCase())&&this.cards[e].requiredKeywords.push(t);for(const i of this.classifications){let s=`challenges a ${i.toLowerCase()}`;t.replace(s,"").includes(i.toLowerCase())&&this.cards[e].requiredClassifications.push(i)}for(const i of this.types)if("Character"!==i)if("Item"!==i)t.includes(i.toLowerCase())&&this.cards[e].requiredTypes.push(i);else{const s=/(?:chosen item of yours|your items?|reveal an item)/g;t.match(s)&&this.cards[e].requiredTypes.push(i)}for(const i of this.cardNames)t.includes(` ${i.toLowerCase()}`)&&this.cards[e].requiredCardNames.push(i);if(this.cards[e].hasShift){let t=[this.cards[e].name];this.cards[e].name.includes("&")&&(t=this.cards[e].name.split("&").map((e=>e.trim()))),this.cards[e].requiredCardNames.push(...t)}this.cards[e].requiredKeywords=[...new Set(this.cards[e].requiredKeywords)],this.cards[e].requiredClassifications=[...new Set(this.cards[e].requiredClassifications)],this.cards[e].requiredTypes=[...new Set(this.cards[e].requiredTypes)],this.cards[e].requiredCardNames=[...new Set(this.cards[e].requiredCardNames)]}}get keywords(){return["Ward","Evasive","Bodyguard","Resist","Singer","Shift","Reckless","Challenger","Rush"]}get classifications(){return[...new Set(this.cards.map((e=>e.classifications)).flat())]}get types(){return[...new Set(this.cards.map((e=>e.types)).flat())]}get cardNames(){return[...new Set(this.cards.map((e=>e.name)))]}generateDeck(e,t=[],i="default",s=50){console.log(`Generating ${i} deck, ${s} tries remaining`);const r=this.cards.filter((t=>{if(1===t.inks.length&&e.includes(t.inks[0]))return!0;let i=!0;for(const s of e)if(!t.inks.includes(s)){i=!1;break}return i}));if(0===r.length)return[];do{let e=this.pickRandomCard(r,t,i,s);t.push(e)}while(!this.isDeckValid(t));return s>=0&&(s--,t=this.validateAndRetry(t,i,s)),t}pickRandomCost(e){const t={1:this.currentDistribution[1]-e.filter((e=>1===e.cost)).length,2:this.currentDistribution[2]-e.filter((e=>2===e.cost)).length,3:this.currentDistribution[3]-e.filter((e=>3===e.cost)).length,4:this.currentDistribution[4]-e.filter((e=>4===e.cost)).length,5:this.currentDistribution[5]-e.filter((e=>e.cost>=5)).length},i=Object.values(t).reduce(((e,t)=>e+t),0),s=Math.random()*i;let r=0,n=null;for(const e in t)if(r+=t[e],r>=s){n=e;break}return parseInt(n)}pickRandomCard(e,t,i,s){const r=this.pickRandomCost(t);let n=e.filter((e=>5===r?e.cost>=r:e.cost===r)).map((e=>({card:e,weight:this.weightCalculator.calculateWeight(e,t,i,s)}))).filter((e=>e.weight>0));n=n.filter((e=>t.filter((t=>t.id===e.card.id)).length<4));const a=n.reduce(((e,t)=>e+t.weight),0),d=Math.floor(Math.random()*a);let o=0,c=null;for(const e of n)if(o+=e.weight,o>=d){c=e.card;break}return c}isDeckValid(e){return e.length>=60}validateAndRetry(e,t,i){let s=e.length,r=s=null;do{console.log("Removing cards without requirements"),r=s,s=(e=this.removeCardsWithoutRequirements(e)).length}while(s!==r);const n=e.filter((t=>1===e.filter((e=>e.id===t.id)).length));if(n.length>4){console.log("Removing cards with single copy");for(const t of n)console.log(`Removing ${t.title} with single copy`),s=(e=e.filter((e=>e.id!==t.id))).length}return 60===s?e:this.generateDeck(e.map((e=>e.ink)),e,t,i)}removeCardsWithoutRequirements(e){const t=[];for(const i of e)t.includes(i)||t.push(i);for(const i of t)this.cardHasMissingRequirements(i,t)&&(i.deckMeetsRequiredKeywords(e),i.deckMeetsRequiredClassifications(e),i.deckMeetsRequiredTypes(e),i.deckMeetsRequiredCardNames(e),i.deckMeetsShiftRequirements(e),e=e.filter((e=>e.id!==i.id)));return e}cardHasMissingRequirements(e,t){return!e.deckMeetsRequirements(t)}}class l{constructor(e,t,i,s,r,n,a,d,o,c,h){this.deck=[],this.inks=[],this.deckGenerator=e,this.loadingScreen=t,this.generateDeckButtons=i,this.testDeckButton=s,this.clearDeckButton=r,this.primaryInk=n,this.secondaryInk=a,this.deckContainer=d,this.dialogContainer=o,this.cardSelectContainer=c,this.chart=h,this.init()}init(){this.addListeners(),this.toggleInk(),this.loadingScreen.close()}addListeners(){this.generateDeckButtons.forEach((e=>{e.addEventListener("click",(()=>{this.loadingScreen.show();let t="default";switch(e.dataset.distribution){case"default":this.deckGenerator.useDefaultDistribution();break;case"aggro":t="aggro",this.deckGenerator.useAggroDistribution()}this.deck=this.deckGenerator.generateDeck(this.inks,this.deck,t),this.renderDeck(),this.addPickableCards(),this.chart.renderChart(this.deck),setTimeout((()=>this.loadingScreen.close()),1e3)}))})),this.clearDeckButton.addEventListener("click",(()=>{this.deck=[],this.renderDeck(),this.addPickableCards(),this.chart.renderChart(this.deck)})),this.primaryInk.addEventListener("change",this.toggleInk.bind(this)),this.secondaryInk.addEventListener("change",this.toggleInk.bind(this)),this.deckContainer.addEventListener("click",(e=>{const t=e.target.closest("[data-role=card]");if(t){const e=this.dialogContainer.querySelector("img");e.src=t.src,e.alt=t.alt,this.dialogContainer.showModal()}})),this.deckContainer.addEventListener("click",(e=>{const t=e.target.closest("[data-role=remove-card]");if(t){const e=t.dataset.cardId,i=this.deck.findIndex((t=>t.id===e));-1!==i&&this.deck.splice(i,1),this.renderDeck(),this.addPickableCards(),this.chart.renderChart(this.deck)}})),this.deckContainer.addEventListener("click",(e=>{e.target.closest("[data-role=add-card]")&&this.cardSelectContainer.showModal()})),this.dialogContainer.querySelector("[data-role=close]").addEventListener("click",(()=>{this.dialogContainer.close()})),this.cardSelectContainer.querySelector("[data-role=close]").addEventListener("click",(()=>{this.cardSelectContainer.close()})),this.cardSelectContainer.querySelector("[data-role=filter]").addEventListener("change",(()=>{this.addPickableCards()})),this.cardSelectContainer.querySelector("[data-role=filter]").addEventListener("input",(()=>{this.addPickableCards()})),this.cardSelectContainer.addEventListener("click",(e=>{const t=e.target.closest("[data-role=add-card-to-deck]");if(t){const e=t.dataset.card,i=this.deckGenerator.cards.find((t=>t.id===e));this.deck.push(i),this.renderDeck(),this.addPickableCards(),this.chart.renderChart(this.deck),60===this.deck.length&&this.cardSelectContainer.close()}})),this.testDeckButton.addEventListener("click",(()=>{window.open(this.inkTableLink,"_blank")}))}toggleInk(){const e=[];let t=this.primaryInk.options[this.primaryInk.selectedIndex],i=this.secondaryInk.options[this.secondaryInk.selectedIndex];const s=["Amber","Amethyst","Emerald","Ruby","Sapphire","Steel"];if("Random"===t.value){const e=s[Math.floor(Math.random()*s.length)],i=Array.from(this.primaryInk.options).find((t=>t.value===e));i.selected=!0,t=i}if("Random"===i.value){const e=s[Math.floor(Math.random()*s.length)],t=Array.from(this.secondaryInk.options).find((t=>t.value===e));t.selected=!0,i=t}e.push(t.value),e.push(i.value),this.inks=e.sort(),this.removeCardsFromWrongInk(),this.addPickableCards()}addPickableCards(){let e=this.getPossibleCards();const t=this.cardSelectContainer.querySelector("[data-role=card-list]"),i=this.cardSelectContainer.querySelector("[data-role=filter]").value.toLowerCase();i&&(e=e.filter((e=>e.title.toLowerCase().includes(i)||e.keywords.join(" ").toLowerCase().includes(i)||e.types.join(" ").toLowerCase().includes(i)||e.ink.toLowerCase().includes(i)||e.classifications.join(" ").toLowerCase().includes(i)||e.text.toLowerCase().includes(i)))),t.innerHTML="",e.forEach((e=>{const i=this.deck.filter((t=>t.id===e.id)).length,s=document.createElement("div");s.dataset.role="card-container",e.deckMeetsRequirements(this.deck),t.appendChild(s);const r=document.createElement("img");r.src=e.image,r.alt=e.title,r.dataset.role="card",r.dataset.weight=this.deckGenerator.weightCalculator.calculateWeight(e,this.deck),r.dataset.sanitizedText=e.sanitizedText,s.appendChild(r);const n=document.createElement("button");n.innerHTML=`Add card <small>(${i}/4)</small>`,n.dataset.role="add-card-to-deck",n.dataset.card=e.id,s.appendChild(n)}))}getPossibleCards(){return this.deckGenerator.cards.filter((e=>this.inks.includes(e.ink))).filter((e=>this.deck.filter((t=>t.id===e.id)).length<4)).sort(((e,t)=>{if(e.ink!==t.ink)return this.inks.indexOf(e.ink)-this.inks.indexOf(t.ink);const i=["Character","Action","Item","Location"];return e.types[0]!==t.types[0]?i.indexOf(e.types[0])-i.indexOf(t.types[0]):e.cost!==t.cost?e.cost-t.cost:e.title<t.title?-1:1}))}renderDeck(){if(this.deckContainer.innerHTML="",this.deck.sort(((e,t)=>{if(e.ink!==t.ink)return this.inks.indexOf(e.ink)-this.inks.indexOf(t.ink);const i=["Character","Action","Item","Location"];return e.types[0]!==t.types[0]?i.indexOf(e.types[0])-i.indexOf(t.types[0]):e.cost!==t.cost?e.cost-t.cost:e.title<t.title?-1:1})),this.deck.forEach((e=>{this.addCard(e)})),this.testDeckButton.classList.remove("hidden"),this.generateDeckButtons.forEach((e=>e.classList.add("hidden"))),this.deck.length<60){const e=document.createElement("div");e.dataset.role="card-container",this.deckContainer.appendChild(e);const t=document.createElement("button");t.textContent="Add card",t.dataset.role="add-card",e.appendChild(t),this.testDeckButton.classList.add("hidden"),this.generateDeckButtons.forEach((e=>e.classList.remove("hidden")))}}addCard(e){const t=document.createElement("div");t.dataset.role="card-container",e.deckMeetsRequirements(this.deck),this.deckContainer.appendChild(t);const i=document.createElement("img");i.src=e.image,i.alt=e.title,i.dataset.role="card",i.dataset.selectedCard=e.id,i.dataset.data=JSON.stringify(e),i.dataset.weight=this.deckGenerator.weightCalculator.calculateWeight(e,this.deck),t.appendChild(i);const s=document.createElement("button");s.textContent="X",s.dataset.role="remove-card",s.dataset.cardId=e.id,t.appendChild(s)}removeCardsFromWrongInk(){this.deck=this.deck.filter((e=>this.inks.includes(e.ink))),this.renderDeck(),this.chart.renderChart(this.deck)}get inkTableLink(){const e=Math.random().toString(36).substring(7);let t=`Generated Deck: ${this.inks[0]} - ${this.inks[1]} - ${e}`;t=encodeURIComponent(t);let i="";const s=[...new Set(this.deck.map((e=>e.title)))];for(const e of s){const t=this.deck.filter((t=>t.title===e)).length;i+=`${e}$${t}|`}return console.log(i),console.log(btoa(i)),`https://inktable.net/lor/import?svc=dreamborn&name=${t}&id=${btoa(i)}`}}var u=i(868),f=i(100),m=i.n(f);class k{constructor(e){this.canvas=e}renderChart(e){void 0!==this.canvas.chart&&this.canvas.chart.destroy(),this.canvas.parentElement.classList.remove("hidden");const t=[],i=[...new Set(e.map((e=>e.ink)))].sort(),s={Amber:"#FFC107",Amethyst:"#9C27B0",Emerald:"#4CAF50",Ruby:"#F44336",Sapphire:"#2196F3",Steel:"#607D8B"};for(const r of i){const i=e.filter((e=>e.ink===r)),n=Array.from({length:11},(()=>0)),a=Array.from({length:11},(()=>0));for(const e of i)e.inkwell?n[e.cost]++:a[e.cost]++;t.push({label:r,data:n,backgroundColor:s[r]}),t.push({label:`${r} (Non-Inkable)`,data:a,backgroundColor:m().draw("diagonal",s[r])})}this.canvas.chart=new u.t1(this.canvas,{type:"bar",data:{labels:[0,1,2,3,4,5,6,7,8,9,10],datasets:t},options:{scales:{x:{stacked:!0},y:{stacked:!0}}}})}}document.addEventListener("DOMContentLoaded",(async()=>{const e=new o,t=await e.getCards(),i=new c,s=new h(t,i),r=new k(document.querySelector("[data-role=chart]")),n=document.querySelector("[data-role=loading]");n.show(),new l(s,n,document.querySelectorAll("[data-role=generator]"),document.querySelector("[data-role=test]"),document.querySelector("[data-role=clear]"),document.querySelector("#primaryInk"),document.querySelector("#secondaryInk"),document.querySelector("[data-role=deck]"),document.querySelector("[data-role=card-preview]"),document.querySelector("[data-role=card-select]"),r)}))}},e=>{e.O(0,[839],(()=>e(e.s=555))),e.O()}]);